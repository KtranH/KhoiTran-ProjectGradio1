import gradio as gr
import requests
import json
import io
from PIL import Image
import base64
import re
from src.utils.database import DatabaseConnection
from src.utils.query_generator import QueryGenerator
import os
from typing import Dict, Any, Optional
from src.config.database import get_connection_string

# Kh·ªüi t·∫°o k·∫øt n·ªëi database
DB_CONNECTION_STRING = get_connection_string()
db = DatabaseConnection(DB_CONNECTION_STRING)

# Cache cho schema c·ªßa c√°c b·∫£ng
table_schemas = {}

def init_table_schemas():
    """Kh·ªüi t·∫°o schema cho c√°c b·∫£ng"""
    global table_schemas
    if db.connect():
        try:
            # L·∫•y danh s√°ch c√°c b·∫£ng
            results = db.execute_query("""
                SELECT TABLE_NAME 
                FROM INFORMATION_SCHEMA.TABLES 
                WHERE TABLE_TYPE = 'BASE TABLE'
            """)
            
            if results:
                for table in results:
                    table_name = table["TABLE_NAME"]
                    schema = db.get_table_schema(table_name)
                    if schema:
                        table_schemas[table_name] = schema
                print(f"ƒê√£ t·∫£i schema cho {len(table_schemas)} b·∫£ng")
            else:
                print("Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o trong database")
        except Exception as e:
            print(f"L·ªói khi kh·ªüi t·∫°o schema: {str(e)}")
        finally:
            db.disconnect()
    else:
        print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")

# Kh·ªüi t·∫°o schema khi kh·ªüi ƒë·ªông
init_table_schemas()

# Kh·ªüi t·∫°o QueryGenerator
query_generator = QueryGenerator(table_schemas)

def extract_think_content(response):
    think_pattern = r'<think>(.*?)</think>'
    main_pattern = r'</think>\s*(.*?)$'
    
    think_match = re.search(think_pattern, response, re.DOTALL)
    main_match = re.search(main_pattern, response, re.DOTALL)
    
    think_content = think_match.group(1).strip() if think_match else None
    main_content = main_match.group(1).strip() if main_match else response.strip()
    
    return think_content, main_content

def search_web(query: str) -> str:
    """
    T√¨m ki·∫øm th√¥ng tin tr√™n web (s·ª≠ d·ª•ng DuckDuckGo API)
    """
    try:
        response = requests.get(
            "https://api.duckduckgo.com/",
            params={
                "q": query,
                "format": "json"
            }
        )
        data = response.json()
        if data.get("Abstract"):
            return data["Abstract"]
        elif data.get("RelatedTopics"):
            return data["RelatedTopics"][0].get("Text", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.")
        return "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p."
    except Exception as e:
        return f"L·ªói khi t√¨m ki·∫øm: {str(e)}"

def is_database_question(question: str) -> bool:
    """
    Ki·ªÉm tra xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn database kh√¥ng
    """
    # C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn database
    db_keywords = [
        "database", "c∆° s·ªü d·ªØ li·ªáu", "sql", "b·∫£ng", "table",
        "c√≥ bao nhi√™u", "s·ªë l∆∞·ª£ng", "danh s√°ch", "list",
        "ph√≤ng", "room", "lo·∫°i ph√≤ng", "room type",
        "tr·ªëng", "available", "ƒë√£ ƒë·∫∑t", "booked",
        "kh√°ch h√†ng", "customer", "ƒë∆°n ƒë·∫∑t", "booking",
        "t√¨m ki·∫øm trong database", "tra c·ª©u", "query"
    ]
    
    question = question.lower()
    return any(keyword.lower() in question for keyword in db_keywords)

def process_database_query(question: str) -> Optional[str]:
    """
    X·ª≠ l√Ω c√¢u h·ªèi li√™n quan ƒë·∫øn database
    """
    if not is_database_question(question):
        return None
        
    # Ph√¢n t√≠ch c√¢u h·ªèi
    analysis = query_generator.analyze_question(question)
    if not analysis:
        return "T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ database, nh∆∞ng t√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ª£c b·∫£ng ho·∫∑c th√¥ng tin c·∫ßn truy v·∫•n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n."
        
    # T·∫°o c√¢u truy v·∫•n SQL
    query = query_generator.generate_sql_query(analysis)
    print(f"SQL Query: {query}")  # In ra c√¢u truy v·∫•n ƒë·ªÉ debug
    
    # Th·ª±c thi truy v·∫•n
    if db.connect():
        try:
            results = db.execute_query(query)
            if results is not None:
                return f"""üîç **K·∫øt qu·∫£ truy v·∫•n database:**
```sql
{query}
```

üìä **D·ªØ li·ªáu:**
{db.format_results_as_text(results)}"""
            return "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p."
        except Exception as e:
            return f"L·ªói khi truy v·∫•n database: {str(e)}"
        finally:
            db.disconnect()
    return "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database."

def get_chat_response(message, history, enable_web_search=False, api_url="http://127.0.0.1:1234"):
    headers = {
        "Content-Type": "application/json",
    }
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ database kh√¥ng
    db_result = process_database_query(message)
    if db_result:
        return {
            "think": f"ƒê√£ t√¨m th·∫•y th√¥ng tin trong database. ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...",
            "main": db_result
        }
    
    # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ chat sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho API
    conversation_history = []
    for msg in history:
        conversation_history.append({
            "role": msg["role"],
            "content": msg["content"]
        })
    
    conversation_history.append({"role": "user", "content": message})
    
    payload = {
        "messages": conversation_history,
        "temperature": 0.8,
        "max_tokens": 4096,
    }
    
    try:
        response = requests.post(f"{api_url}/v1/chat/completions", 
                               headers=headers, 
                               json=payload,
                               timeout=300)
        response.raise_for_status()
        content = response.json()['choices'][0]['message']['content']
        
        # X·ª≠ l√Ω n·ªôi dung think v√† main
        think_content, main_content = extract_think_content(content)
        
        # Ch·ªâ t√¨m ki·∫øm web khi ƒë∆∞·ª£c b·∫≠t v√† c√≥ y√™u c·∫ßu t√¨m ki·∫øm
        if enable_web_search and ("t√¨m tr√™n web" in message.lower() or "t√¨m ki·∫øm" in message.lower()):
            web_result = search_web(message)
            if think_content:
                think_content += f"\n\nüåê **K·∫øt qu·∫£ t√¨m ki·∫øm web:**\n{web_result}"
            else:
                think_content = f"üåê **K·∫øt qu·∫£ t√¨m ki·∫øm web:**\n{web_result}"
        
        if think_content:
            return {
                "think": think_content,
                "main": main_content
            }
        return main_content
    except Exception as e:
        return f"L·ªói: {str(e)}"

def analyze_image(image, question, history, api_url="http://127.0.0.1:1234"):
    if image is None:
        return "Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.", history
    
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    
    headers = {
        "Content-Type": "application/json",
    }
    
    conversation_history = []
    for msg in history:
        content = msg["content"]
        if isinstance(content, dict) and "main" in content:
            content = content["main"]
        conversation_history.append({"role": msg["role"], "content": content})
    
    message = {
        "role": "user",
        "content": [
            {"type": "text", "text": question},
            {
                "type": "image_url",
                "image_url": f"data:image/jpeg;base64,{img_str}"
            }
        ]
    }
    
    payload = {
        "messages": conversation_history + [message],
        "temperature": 0.7,
        "max_tokens": 1024,
    }
    
    try:
        response = requests.post(f"{api_url}/v1/chat/completions", 
                               headers=headers, 
                               json=payload,
                               timeout=30)
        response.raise_for_status()
        content = response.json()['choices'][0]['message']['content']
        
        # X·ª≠ l√Ω n·ªôi dung think v√† main
        think_content, main_content = extract_think_content(content)
        assistant_message = {
            "role": "assistant",
            "content": {
                "think": think_content,
                "main": main_content
            } if think_content else main_content
        }
        return assistant_message["content"], history + [
            {"role": "user", "content": question},
            assistant_message
        ]
    except Exception as e:
        return f"L·ªói khi ph√¢n t√≠ch ·∫£nh: {str(e)}", history

def create_chat_message(role, content):
    return {"role": role, "content": content}

def process_image_and_question(image, question, history, enable_web_search=False):
    """
    X·ª≠ l√Ω c√¢u h·ªèi li√™n quan ƒë·∫øn h√¨nh ·∫£nh
    """
    if not question.strip():
        return history if history else []
    if history is None:
        history = []
    
    # Th√™m tin nh·∫Øn c·ªßa user theo ƒë√∫ng ƒë·ªãnh d·∫°ng
    history.append({"role": "user", "content": question})
    
    if image is None:
        history.append({"role": "assistant", "content": "Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch."})
        return history
    
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    
    # T·∫°o tin nh·∫Øn v·ªõi h√¨nh ·∫£nh
    message = {
        "role": "user",
        "content": [
            {"type": "text", "text": question},
            {
                "type": "image_url",
                "image_url": f"data:image/jpeg;base64,{img_str}"
            }
        ]
    }
    
    try:
        response = requests.post(
            "http://127.0.0.1:1234/v1/chat/completions",
            headers={"Content-Type": "application/json"},
            json={
                "messages": [message],
                "temperature": 0.7,
                "max_tokens": 1024,
            },
            timeout=30
        )
        response.raise_for_status()
        content = response.json()['choices'][0]['message']['content']
        
        # X·ª≠ l√Ω n·ªôi dung think v√† main
        think_content, main_content = extract_think_content(content)
        
        # Th√™m k·∫øt qu·∫£ t√¨m ki·∫øm web n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if enable_web_search and ("t√¨m tr√™n web" in question.lower() or "t√¨m ki·∫øm" in question.lower()):
            web_result = search_web(question)
            if think_content:
                think_content += f"\n\nüåê **K·∫øt qu·∫£ t√¨m ki·∫øm web:**\n{web_result}"
            else:
                think_content = f"üåê **K·∫øt qu·∫£ t√¨m ki·∫øm web:**\n{web_result}"
        
        # T·∫°o n·ªôi dung ph·∫£n h·ªìi
        if think_content:
            bot_content = f"""ü§î **Suy nghƒ©:**
{think_content}

üòÉ **Tr·∫£ l·ªùi:**
{main_content}"""
        else:
            bot_content = main_content
        
        # Th√™m tin nh·∫Øn c·ªßa bot theo ƒë√∫ng ƒë·ªãnh d·∫°ng
        history.append({"role": "assistant", "content": bot_content})
        return history
    except Exception as e:
        history.append({"role": "assistant", "content": f"L·ªói khi ph√¢n t√≠ch ·∫£nh: {str(e)}"})
        return history

def tab6_interface():
    with gr.Blocks() as tab6:
        gr.Markdown("### ü§ñ Chatbot AI")
        
        with gr.Row():
            with gr.Column(scale=8):
                chatbot = gr.Chatbot(
                    type="messages",
                    height=600,
                    show_label=False,
                    container=True,
                    avatar_images=("https://pub-ed515111f589440fb333ebcd308ee890.r2.dev/476116956_637530651994945_4137383568616611950_n.jpg", "https://pub-ed515111f589440fb333ebcd308ee890.r2.dev/images.jpg"),
                    latex_delimiters=[
                        {"left": "\\[", "right": "\\]", "display": True},
                        {"left": "\\(", "right": "\\)", "display": False},
                        {"left": "$", "right": "$", "display": False},
                        {"left": "\\boxed{", "right": "}", "display": False}
                    ],
                    bubble_full_width=False,
                    show_copy_button=True,
                    render_markdown=True
                )
            with gr.Column(scale=3, visible=False): 
                image_input = gr.Image(label="T·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch", type="pil")
        
        with gr.Row():
            with gr.Column(scale=8):
                msg = gr.Textbox(
                    label="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n",
                    placeholder="Nh·∫≠p tin nh·∫Øn (·∫•n enter ƒë·ªÉ g·ª≠i tin nh·∫Øn)...",
                    show_label=False
                )
            with gr.Column(scale=1):
                clear = gr.Button("üóëÔ∏è X√≥a")
        
        with gr.Row():
            enable_web_search = gr.Checkbox(
                label="B·∫≠t t√¨m ki·∫øm web",
                value=False,
                info="Khi b·∫≠t, chatbot s·∫Ω t√¨m ki·∫øm th√¥ng tin tr√™n web n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu"
            )
        
        def user(user_message, history):
            if history is None:
                history = []
            # T·∫°o tin nh·∫Øn theo ƒë√∫ng ƒë·ªãnh d·∫°ng c·ªßa Gradio
            history.append({"role": "user", "content": user_message})
            return "", history

        def bot(history, enable_web_search):
            if not history:
                return history
            
            # L·∫•y tin nh·∫Øn cu·ªëi c√πng c·ªßa user
            user_message = history[-1]["content"]
            
            # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ chat sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho API
            formatted_history = []
            for msg in history[:-1]:  # Kh√¥ng bao g·ªìm tin nh·∫Øn cu·ªëi c√πng v√¨ ƒë√£ l·∫•y ·ªü tr√™n
                formatted_history.append(msg)
            
            # L·∫•y ph·∫£n h·ªìi t·ª´ bot
            bot_message = get_chat_response(user_message, formatted_history, enable_web_search)
            
            # T·∫°o tin nh·∫Øn bot theo ƒë√∫ng ƒë·ªãnh d·∫°ng
            if isinstance(bot_message, dict) and "think" in bot_message:
                content = f"""ü§î **Suy nghƒ©:**
{bot_message['think']}

---

üòÉ **Tr·∫£ l·ªùi:**
{bot_message['main']}"""
            else:
                content = bot_message
            
            # Th√™m tin nh·∫Øn c·ªßa bot v√†o l·ªãch s·ª≠
            history.append({"role": "assistant", "content": content})
            return history

        msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(
            bot, [chatbot, enable_web_search], chatbot
        )

        clear.click(lambda: [], None, chatbot, queue=False)
        
        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn v·ªõi h√¨nh ·∫£nh
        msg.submit(
            process_image_and_question,
            [image_input, msg, chatbot, enable_web_search],
            [chatbot],
        )

    return tab6